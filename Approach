You're making a great choice with Designing Data-Intensive Applications—it's one of the best books for system design. Since you have no prior experience in companies, here's how you can approach learning and practicing system design effectively:

1. Structured Learning Approach**
Since the book is dense, break it down into manageable chunks:

Phase 1: Foundations (Chapters 1-6)**
- Focus on core concepts like reliability, scalability, and maintainability.
- Learn about different storage systems (SQL vs. NoSQL) and how they handle data consistency.
- Understand replication, partitioning, and consensus algorithms.

✅ Practice: 
- Explain concepts to yourself in simple words.
- Write short summaries of each chapter.
- Create comparison tables for different architectures (e.g., relational vs. document stores).

Phase 2: Advanced Topics (Chapters 7-12)
- Learn about distributed systems, consistency models, and message brokers.
- Understand stream processing vs. batch processing.
- Study real-world architectures like Facebook, Netflix, and Uber.

✅ Practice:
- Try designing small systems like a URL shortener, chat application, or rate limiter.
- Analyze how different companies solve scaling problems (read engineering blogs like Uber, Netflix, and Meta).

---

2. Practical Application: How to Practice System Design
Since you don’t have industry experience, hands-on practice is crucial.

A. Case Study Approach
- Pick a real-world system (e.g., Twitter, YouTube, or an e-commerce site).
- Try designing the database schema, API endpoints, and scaling strategies.
- Consider trade-offs: SQL vs. NoSQL, monolith vs. microservices.

✅ Example:
If designing Instagram, ask yourself:
- How would you store images?
- How do you handle millions of requests?
- How do you implement newsfeed ranking?

B. Low-Level Design (LLD)
- Design Object-Oriented models (OOP).
- Write class diagrams for real-world systems.
- Learn design patterns like Singleton, Factory, and Observer.

✅ Example: 
- Implement a rate limiter in Java.
- Write code for an in-memory cache like LRU.

C. Mock Interviews
- Watch system design mock interviews (ByteByteGo, Gaurav Sen).
- Practice with friends or online communities like Exponent, Pramp.
- Participate in LeetCode system design discussions.

---

3. Key Resources Beyond the Book
- YouTube Channels: Gaurav Sen, System Design Primer, ByteByteGo.
- Books: The System Design Interview* by Alex Xu, Designing Distributed Systems by Brendan Burns.
- Platforms: Grokking System Design, Exponent, LeetCode discussion forums.

---

Final Plan
1. 2-3 weeks: Read and summarize each chapter.
2. Next 4 weeks: Implement small projects and practice case studies.
3. Next 2 weeks: Do mock interviews and refine communication skills.

